input {
   beats {
     port => 5000
   }
}


filter {

   if "varellog" in [type] {
	 mutate {
	     add_tag => [ "varellog"]
	  }
   }


 mutate {
     remove_field => [ "beat", "fields", "input_type", "offset", "source", "type", "count" ]
  }

  grok {
    patterns_dir => "/etc/logstash/conf.d/patterns"
    match => ["message", "%{APPSERVER_START_EVENT}"]
    match => ["message", "%{APPSERVER_STARTED_EVENT}"]
    add_field => { "type" => "appserver" }
  }

   if "_grokparsefailure" in [tags] {
	grok {
	  patterns_dir => "/etc/logstash/conf.d/patterns"
	  match => ["message", "%{DCN_CH_STATE_EVENT}"]
	  match => ["message", "%{DCN_CH_STATE_INITIALIZED_EVENT}"]
	  add_field => { "type" => "dcnstate" }
	  remove_tag => [ "_grokparsefailure" ]
	}
   }

   if "_grokparsefailure" in [tags] {
	grok {
	  patterns_dir => "/etc/logstash/conf.d/patterns"
	  match => ["message", "%{JAVA_MEDIATION_CALL_OUT_EVENT}"]
	  add_field => { "type" => "mediationcall"  "direction" => "out" }
	  remove_tag => [ "_grokparsefailure" ]
	}
    }

   if "_grokparsefailure" in [tags] {
	grok {
	  patterns_dir => "/etc/logstash/conf.d/patterns"
	  match => ["message", "%{JAVA_MEDIATION_CALL_RESULT_EVENT}"]
	  add_field => { "type" => "mediationcall" "direction" => "in"}
	  remove_tag => [ "_grokparsefailure" ]
	}
    }

  if "_grokparsefailure" in [tags] {
    drop { }
  }

 date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
  }

 mutate {
     remove_field => [ "timestamp", "customInfo", "host" ]
     convert => { "invocationTime" => "integer" }
  }
}


output {
# if "varellog" in [tags] {
#  stdout {   
#    codec => rubydebug
#  }
#}

 if "varellog" in [tags] {
   elasticsearch {
        hosts => "elasticsearch:9200"
	index => varel_bicnetlog
   }
 }
}
